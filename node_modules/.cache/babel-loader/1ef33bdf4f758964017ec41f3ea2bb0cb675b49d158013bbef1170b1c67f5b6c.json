{"ast":null,"code":"// Resolution Center mock service (rcfx)\nimport DEV_CONFIG from '../config/dev.js';\nconst USE_MOCKS = process.env.REACT_APP_USE_MOCKS === 'true' || !DEV_CONFIG.ENABLE_AUTH;\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// Mock disputes\nlet mockDisputes = [{\n  id: 101,\n  orderId: 'ORD-2051',\n  disputeCode: 'DISP-1045',\n  customerName: 'Ali Raza',\n  customerPhone: '0301-1234567',\n  reason: 'Extra charges added',\n  raisedAt: '2025-06-12T14:35:00Z',\n  status: 'new',\n  // new | resolved\n  mechanicName: 'Ahmad Fraz',\n  resolution: null,\n  resolvedBy: null,\n  resolvedAt: null,\n  messages: [{\n    id: 1,\n    from: 'customer',\n    text: \"Hello admin the customer hasn't pay after delivery.\",\n    ts: '2025-06-12T10:22:00Z'\n  }, {\n    id: 2,\n    from: 'admin',\n    text: 'Thank you for reporting we are reviewing the order.',\n    ts: '2025-06-12T10:26:00Z'\n  }]\n}, {\n  id: 102,\n  orderId: 'ORD-2090',\n  disputeCode: 'DISP-1099',\n  customerName: 'Sara Khan',\n  customerPhone: '0302-5551111',\n  reason: 'Incorrect part installed',\n  raisedAt: '2025-06-11T09:12:00Z',\n  status: 'resolved',\n  mechanicName: 'Bilal Ahmed',\n  resolution: 'Refund issue to customer',\n  resolvedBy: 'Admin',\n  resolvedAt: '2025-06-12T08:10:00Z',\n  messages: [{\n    id: 1,\n    from: 'customer',\n    text: 'The installed part was wrong model.',\n    ts: '2025-06-11T09:15:00Z'\n  }, {\n    id: 2,\n    from: 'admin',\n    text: 'We will investigate this for you.',\n    ts: '2025-06-11T09:17:00Z'\n  }, {\n    id: 3,\n    from: 'admin',\n    text: 'Issue resolved, refund will be processed.',\n    ts: '2025-06-12T08:10:00Z'\n  }]\n}];\nexport function mapDispute(raw) {\n  return {\n    id: raw.id,\n    code: raw.disputeCode,\n    orderId: raw.orderId,\n    customer: raw.customerName,\n    phone: raw.customerPhone,\n    reason: raw.reason,\n    raisedAt: raw.raisedAt,\n    status: raw.status,\n    mechanic: raw.mechanicName,\n    resolution: raw.resolution,\n    resolvedBy: raw.resolvedBy,\n    resolvedAt: raw.resolvedAt,\n    messageCount: raw.messages.length\n  };\n}\nexport function mapDisputeDetail(raw) {\n  if (!raw) return null;\n  return {\n    ...mapDispute(raw),\n    messages: raw.messages.slice()\n  };\n}\nexport async function getDisputes(status, signal) {\n  if (USE_MOCKS) {\n    return new Promise(resolve => setTimeout(() => {\n      resolve(mockDisputes.filter(d => status ? d.status === status : true));\n    }, 300));\n  }\n  try {\n    const token = localStorage.getItem('token');\n    const res = await fetch(`${API_BASE_URL}/resolution-center?status=${status || ''}`, {\n      headers: {\n        'Authorization': token ? `Bearer ${token}` : ''\n      },\n      signal\n    });\n    if (!res.ok) throw new Error(res.statusText);\n    const json = await res.json();\n    return json.data || [];\n  } catch (e) {\n    console.warn('Resolution disputes API failed, fallback to mocks:', e.message);\n    return mockDisputes.filter(d => status ? d.status === status : true);\n  }\n}\nexport async function getDisputeById(id, signal) {\n  if (USE_MOCKS) {\n    return new Promise(resolve => setTimeout(() => {\n      resolve(mockDisputes.find(d => d.id === parseInt(id)) || null);\n    }, 250));\n  }\n  try {\n    const token = localStorage.getItem('token');\n    const res = await fetch(`${API_BASE_URL}/resolution-center/${id}`, {\n      headers: {\n        'Authorization': token ? `Bearer ${token}` : ''\n      },\n      signal\n    });\n    if (!res.ok) throw new Error(res.statusText);\n    const json = await res.json();\n    return json.data || null;\n  } catch (e) {\n    console.warn('Dispute detail API failed, fallback to mocks:', e.message);\n    return mockDisputes.find(d => d.id === parseInt(id)) || null;\n  }\n}\nexport async function postDisputeMessage(id, text) {\n  if (USE_MOCKS) {\n    return new Promise(resolve => setTimeout(() => {\n      const target = mockDisputes.find(d => d.id === parseInt(id));\n      if (target) {\n        const newMsg = {\n          id: target.messages.length + 1,\n          from: 'admin',\n          text,\n          ts: new Date().toISOString()\n        };\n        target.messages.push(newMsg);\n        resolve(newMsg);\n      } else {\n        resolve(null);\n      }\n    }, 200));\n  }\n  try {\n    const token = localStorage.getItem('token');\n    const res = await fetch(`${API_BASE_URL}/resolution-center/${id}/messages`, {\n      method: 'POST',\n      headers: {\n        'Authorization': token ? `Bearer ${token}` : '',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        text\n      })\n    });\n    if (!res.ok) throw new Error(res.statusText);\n    const json = await res.json();\n    return json.data || null;\n  } catch (e) {\n    console.warn('Post message failed, mock append:', e.message);\n    return postDisputeMessage(id, text); // fallback to mock logic\n  }\n}\nexport async function resolveDispute(id, resolutionText) {\n  if (USE_MOCKS) {\n    return new Promise(resolve => setTimeout(() => {\n      const idx = mockDisputes.findIndex(d => d.id === parseInt(id));\n      if (idx !== -1) {\n        mockDisputes[idx] = {\n          ...mockDisputes[idx],\n          status: 'resolved',\n          resolution: resolutionText,\n          resolvedBy: 'Admin',\n          resolvedAt: new Date().toISOString()\n        };\n        resolve(mockDisputes[idx]);\n      } else resolve(null);\n    }, 300));\n  }\n  try {\n    const token = localStorage.getItem('token');\n    const res = await fetch(`${API_BASE_URL}/resolution-center/${id}/resolve`, {\n      method: 'PUT',\n      headers: {\n        'Authorization': token ? `Bearer ${token}` : '',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        resolution: resolutionText\n      })\n    });\n    if (!res.ok) throw new Error(res.statusText);\n    const json = await res.json();\n    return json.data || null;\n  } catch (e) {\n    console.warn('Resolve dispute failed, mock fallback:', e.message);\n    return resolveDispute(id, resolutionText);\n  }\n}","map":{"version":3,"names":["DEV_CONFIG","USE_MOCKS","process","env","REACT_APP_USE_MOCKS","ENABLE_AUTH","API_BASE_URL","REACT_APP_API_URL","mockDisputes","id","orderId","disputeCode","customerName","customerPhone","reason","raisedAt","status","mechanicName","resolution","resolvedBy","resolvedAt","messages","from","text","ts","mapDispute","raw","code","customer","phone","mechanic","messageCount","length","mapDisputeDetail","slice","getDisputes","signal","Promise","resolve","setTimeout","filter","d","token","localStorage","getItem","res","fetch","headers","ok","Error","statusText","json","data","e","console","warn","message","getDisputeById","find","parseInt","postDisputeMessage","target","newMsg","Date","toISOString","push","method","body","JSON","stringify","resolveDispute","resolutionText","idx","findIndex"],"sources":["C:/Users/gilbe/Downloads/Garage/AutoSaaz-Garage-Client/src/services/resolutionCenter.service.js"],"sourcesContent":["// Resolution Center mock service (rcfx)\r\nimport DEV_CONFIG from '../config/dev.js';\r\n\r\nconst USE_MOCKS = process.env.REACT_APP_USE_MOCKS === 'true' || !DEV_CONFIG.ENABLE_AUTH;\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\n// Mock disputes\r\nlet mockDisputes = [\r\n  {\r\n    id: 101,\r\n    orderId: 'ORD-2051',\r\n    disputeCode: 'DISP-1045',\r\n    customerName: 'Ali Raza',\r\n    customerPhone: '0301-1234567',\r\n    reason: 'Extra charges added',\r\n    raisedAt: '2025-06-12T14:35:00Z',\r\n    status: 'new', // new | resolved\r\n    mechanicName: 'Ahmad Fraz',\r\n    resolution: null,\r\n    resolvedBy: null,\r\n    resolvedAt: null,\r\n    messages: [\r\n      { id: 1, from: 'customer', text: \"Hello admin the customer hasn't pay after delivery.\", ts: '2025-06-12T10:22:00Z' },\r\n      { id: 2, from: 'admin', text: 'Thank you for reporting we are reviewing the order.', ts: '2025-06-12T10:26:00Z' }\r\n    ]\r\n  },\r\n  {\r\n    id: 102,\r\n    orderId: 'ORD-2090',\r\n    disputeCode: 'DISP-1099',\r\n    customerName: 'Sara Khan',\r\n    customerPhone: '0302-5551111',\r\n    reason: 'Incorrect part installed',\r\n    raisedAt: '2025-06-11T09:12:00Z',\r\n    status: 'resolved',\r\n    mechanicName: 'Bilal Ahmed',\r\n    resolution: 'Refund issue to customer',\r\n    resolvedBy: 'Admin',\r\n    resolvedAt: '2025-06-12T08:10:00Z',\r\n    messages: [\r\n      { id: 1, from: 'customer', text: 'The installed part was wrong model.', ts: '2025-06-11T09:15:00Z' },\r\n      { id: 2, from: 'admin', text: 'We will investigate this for you.', ts: '2025-06-11T09:17:00Z' },\r\n      { id: 3, from: 'admin', text: 'Issue resolved, refund will be processed.', ts: '2025-06-12T08:10:00Z' }\r\n    ]\r\n  }\r\n];\r\n\r\nexport function mapDispute(raw) {\r\n  return {\r\n    id: raw.id,\r\n    code: raw.disputeCode,\r\n    orderId: raw.orderId,\r\n    customer: raw.customerName,\r\n    phone: raw.customerPhone,\r\n    reason: raw.reason,\r\n    raisedAt: raw.raisedAt,\r\n    status: raw.status,\r\n    mechanic: raw.mechanicName,\r\n    resolution: raw.resolution,\r\n    resolvedBy: raw.resolvedBy,\r\n    resolvedAt: raw.resolvedAt,\r\n    messageCount: raw.messages.length\r\n  };\r\n}\r\n\r\nexport function mapDisputeDetail(raw) {\r\n  if (!raw) return null;\r\n  return { ...mapDispute(raw), messages: raw.messages.slice() };\r\n}\r\n\r\nexport async function getDisputes(status, signal) {\r\n  if (USE_MOCKS) {\r\n    return new Promise(resolve => setTimeout(() => {\r\n      resolve(mockDisputes.filter(d => (status ? d.status === status : true)));\r\n    }, 300));\r\n  }\r\n  try {\r\n    const token = localStorage.getItem('token');\r\n    const res = await fetch(`${API_BASE_URL}/resolution-center?status=${status||''}`, { headers: { 'Authorization': token?`Bearer ${token}`:'' }, signal });\r\n    if (!res.ok) throw new Error(res.statusText);\r\n    const json = await res.json();\r\n    return json.data || [];\r\n  } catch (e) {\r\n    console.warn('Resolution disputes API failed, fallback to mocks:', e.message);\r\n    return mockDisputes.filter(d => (status ? d.status === status : true));\r\n  }\r\n}\r\n\r\nexport async function getDisputeById(id, signal) {\r\n  if (USE_MOCKS) {\r\n    return new Promise(resolve => setTimeout(() => {\r\n      resolve(mockDisputes.find(d => d.id === parseInt(id)) || null);\r\n    }, 250));\r\n  }\r\n  try {\r\n    const token = localStorage.getItem('token');\r\n    const res = await fetch(`${API_BASE_URL}/resolution-center/${id}`, { headers: { 'Authorization': token?`Bearer ${token}`:'' }, signal });\r\n    if (!res.ok) throw new Error(res.statusText);\r\n    const json = await res.json();\r\n    return json.data || null;\r\n  } catch (e) {\r\n    console.warn('Dispute detail API failed, fallback to mocks:', e.message);\r\n    return mockDisputes.find(d => d.id === parseInt(id)) || null;\r\n  }\r\n}\r\n\r\nexport async function postDisputeMessage(id, text) {\r\n  if (USE_MOCKS) {\r\n    return new Promise(resolve => setTimeout(() => {\r\n      const target = mockDisputes.find(d => d.id === parseInt(id));\r\n      if (target) {\r\n        const newMsg = { id: target.messages.length + 1, from: 'admin', text, ts: new Date().toISOString() };\r\n        target.messages.push(newMsg);\r\n        resolve(newMsg);\r\n      } else {\r\n        resolve(null);\r\n      }\r\n    }, 200));\r\n  }\r\n  try {\r\n    const token = localStorage.getItem('token');\r\n    const res = await fetch(`${API_BASE_URL}/resolution-center/${id}/messages`, {\r\n      method: 'POST',\r\n      headers: { 'Authorization': token?`Bearer ${token}`:'', 'Content-Type':'application/json' },\r\n      body: JSON.stringify({ text })\r\n    });\r\n    if (!res.ok) throw new Error(res.statusText);\r\n    const json = await res.json();\r\n    return json.data || null;\r\n  } catch (e) {\r\n    console.warn('Post message failed, mock append:', e.message);\r\n    return postDisputeMessage(id, text); // fallback to mock logic\r\n  }\r\n}\r\n\r\nexport async function resolveDispute(id, resolutionText) {\r\n  if (USE_MOCKS) {\r\n    return new Promise(resolve => setTimeout(() => {\r\n      const idx = mockDisputes.findIndex(d => d.id === parseInt(id));\r\n      if (idx !== -1) {\r\n        mockDisputes[idx] = { ...mockDisputes[idx], status: 'resolved', resolution: resolutionText, resolvedBy: 'Admin', resolvedAt: new Date().toISOString() };\r\n        resolve(mockDisputes[idx]);\r\n      } else resolve(null);\r\n    }, 300));\r\n  }\r\n  try {\r\n    const token = localStorage.getItem('token');\r\n    const res = await fetch(`${API_BASE_URL}/resolution-center/${id}/resolve`, {\r\n      method: 'PUT',\r\n      headers: { 'Authorization': token?`Bearer ${token}`:'', 'Content-Type':'application/json' },\r\n      body: JSON.stringify({ resolution: resolutionText })\r\n    });\r\n    if (!res.ok) throw new Error(res.statusText);\r\n    const json = await res.json();\r\n    return json.data || null;\r\n  } catch (e) {\r\n    console.warn('Resolve dispute failed, mock fallback:', e.message);\r\n    return resolveDispute(id, resolutionText);\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}