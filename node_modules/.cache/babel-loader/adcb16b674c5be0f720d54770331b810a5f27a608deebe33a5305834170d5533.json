{"ast":null,"code":"import mockInspections from '../mocks/inspections.json';\nimport DEV_CONFIG from '../config/dev.js';\n\n/**\r\n * Environment flag to use mocks instead of API\r\n */\nconst USE_MOCKS = process.env.REACT_APP_USE_MOCKS === 'true' || !DEV_CONFIG.ENABLE_AUTH;\n\n/**\r\n * API base URL from environment\r\n */\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n/**\r\n * Fetches inspections from API or returns mock data\r\n * @param {AbortSignal} [signal] - AbortController signal for request cancellation\r\n * @returns {Promise<Array>}\r\n */\nexport async function getInspections(signal) {\n  // If mocks are enabled or auth is disabled, return mock data\n  if (USE_MOCKS) {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve(mockInspections);\n      }, 500); // Simulate network delay\n    });\n  }\n  try {\n    const token = localStorage.getItem('token');\n    const response = await fetch(`${API_BASE_URL}/inspections`, {\n      headers: {\n        'Authorization': token ? `Bearer ${token}` : '',\n        'Content-Type': 'application/json'\n      },\n      signal\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const apiInspections = await response.json();\n    return apiInspections.data || [];\n  } catch (error) {\n    // On any error (network, 401, 500, etc.), fall back to mocks if available\n    if (error.name === 'AbortError') {\n      throw error; // Don't handle aborted requests\n    }\n    console.warn('API call failed, falling back to mock data:', error.message);\n    return mockInspections;\n  }\n}\n\n/**\r\n * Fetches a single inspection by ID\r\n * @param {string|number} id - Inspection ID\r\n * @param {AbortSignal} [signal] - AbortController signal for request cancellation\r\n * @returns {Promise<Object|null>}\r\n */\nexport async function getInspectionById(id, signal) {\n  // If mocks are enabled or auth is disabled, return mock data\n  if (USE_MOCKS) {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        const inspection = mockInspections.find(inspection => inspection.id === parseInt(id));\n        resolve(inspection || null);\n      }, 300);\n    });\n  }\n  try {\n    const token = localStorage.getItem('token');\n    const response = await fetch(`${API_BASE_URL}/inspections/${id}`, {\n      headers: {\n        'Authorization': token ? `Bearer ${token}` : '',\n        'Content-Type': 'application/json'\n      },\n      signal\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const apiInspection = await response.json();\n    return apiInspection.data || null;\n  } catch (error) {\n    if (error.name === 'AbortError') {\n      throw error;\n    }\n    console.warn('API call failed, falling back to mock data:', error.message);\n    const inspection = mockInspections.find(inspection => inspection.id === parseInt(id));\n    return inspection || null;\n  }\n}\n\n/**\r\n * Updates inspection status to completed\r\n * @param {string|number} id - Inspection ID\r\n * @param {Object} updateData - Data to update\r\n * @returns {Promise<Object>}\r\n */\nexport async function updateInspection(id, updateData) {\n  // If mocks are enabled or auth is disabled, simulate update\n  if (USE_MOCKS) {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        const inspectionIndex = mockInspections.findIndex(inspection => inspection.id === parseInt(id));\n        if (inspectionIndex !== -1) {\n          mockInspections[inspectionIndex] = {\n            ...mockInspections[inspectionIndex],\n            ...updateData\n          };\n          resolve(mockInspections[inspectionIndex]);\n        } else {\n          throw new Error('Inspection not found');\n        }\n      }, 500);\n    });\n  }\n  try {\n    const token = localStorage.getItem('token');\n    const response = await fetch(`${API_BASE_URL}/inspections/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Authorization': token ? `Bearer ${token}` : '',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(updateData)\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const apiInspection = await response.json();\n    return apiInspection.data || null;\n  } catch (error) {\n    console.warn('API call failed, falling back to mock update:', error.message);\n\n    // Simulate update in mock data\n    const inspectionIndex = mockInspections.findIndex(inspection => inspection.id === parseInt(id));\n    if (inspectionIndex !== -1) {\n      mockInspections[inspectionIndex] = {\n        ...mockInspections[inspectionIndex],\n        ...updateData\n      };\n      return mockInspections[inspectionIndex];\n    } else {\n      throw new Error('Inspection not found');\n    }\n  }\n}","map":{"version":3,"names":["mockInspections","DEV_CONFIG","USE_MOCKS","process","env","REACT_APP_USE_MOCKS","ENABLE_AUTH","API_BASE_URL","REACT_APP_API_URL","getInspections","signal","Promise","resolve","setTimeout","token","localStorage","getItem","response","fetch","headers","ok","Error","status","apiInspections","json","data","error","name","console","warn","message","getInspectionById","id","inspection","find","parseInt","apiInspection","updateInspection","updateData","inspectionIndex","findIndex","method","body","JSON","stringify"],"sources":["C:/Users/gilbe/Downloads/Garage/AutoSaaz-Garage-Client/src/services/inspections.service.js"],"sourcesContent":["import mockInspections from '../mocks/inspections.json';\r\nimport DEV_CONFIG from '../config/dev.js';\r\n\r\n/**\r\n * Environment flag to use mocks instead of API\r\n */\r\nconst USE_MOCKS = process.env.REACT_APP_USE_MOCKS === 'true' || !DEV_CONFIG.ENABLE_AUTH;\r\n\r\n/**\r\n * API base URL from environment\r\n */\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\n/**\r\n * Fetches inspections from API or returns mock data\r\n * @param {AbortSignal} [signal] - AbortController signal for request cancellation\r\n * @returns {Promise<Array>}\r\n */\r\nexport async function getInspections(signal) {\r\n  // If mocks are enabled or auth is disabled, return mock data\r\n  if (USE_MOCKS) {\r\n    return new Promise(resolve => {\r\n      setTimeout(() => {\r\n        resolve(mockInspections);\r\n      }, 500); // Simulate network delay\r\n    });\r\n  }\r\n\r\n  try {\r\n    const token = localStorage.getItem('token');\r\n    const response = await fetch(`${API_BASE_URL}/inspections`, {\r\n      headers: {\r\n        'Authorization': token ? `Bearer ${token}` : '',\r\n        'Content-Type': 'application/json',\r\n      },\r\n      signal\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n\r\n    const apiInspections = await response.json();\r\n    return apiInspections.data || [];\r\n\r\n  } catch (error) {\r\n    // On any error (network, 401, 500, etc.), fall back to mocks if available\r\n    if (error.name === 'AbortError') {\r\n      throw error; // Don't handle aborted requests\r\n    }\r\n    \r\n    console.warn('API call failed, falling back to mock data:', error.message);\r\n    return mockInspections;\r\n  }\r\n}\r\n\r\n/**\r\n * Fetches a single inspection by ID\r\n * @param {string|number} id - Inspection ID\r\n * @param {AbortSignal} [signal] - AbortController signal for request cancellation\r\n * @returns {Promise<Object|null>}\r\n */\r\nexport async function getInspectionById(id, signal) {\r\n  // If mocks are enabled or auth is disabled, return mock data\r\n  if (USE_MOCKS) {\r\n    return new Promise(resolve => {\r\n      setTimeout(() => {\r\n        const inspection = mockInspections.find(inspection => \r\n          inspection.id === parseInt(id)\r\n        );\r\n        resolve(inspection || null);\r\n      }, 300);\r\n    });\r\n  }\r\n\r\n  try {\r\n    const token = localStorage.getItem('token');\r\n    const response = await fetch(`${API_BASE_URL}/inspections/${id}`, {\r\n      headers: {\r\n        'Authorization': token ? `Bearer ${token}` : '',\r\n        'Content-Type': 'application/json',\r\n      },\r\n      signal\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n\r\n    const apiInspection = await response.json();\r\n    return apiInspection.data || null;\r\n\r\n  } catch (error) {\r\n    if (error.name === 'AbortError') {\r\n      throw error;\r\n    }\r\n    \r\n    console.warn('API call failed, falling back to mock data:', error.message);\r\n    const inspection = mockInspections.find(inspection => \r\n      inspection.id === parseInt(id)\r\n    );\r\n    return inspection || null;\r\n  }\r\n}\r\n\r\n/**\r\n * Updates inspection status to completed\r\n * @param {string|number} id - Inspection ID\r\n * @param {Object} updateData - Data to update\r\n * @returns {Promise<Object>}\r\n */\r\nexport async function updateInspection(id, updateData) {\r\n  // If mocks are enabled or auth is disabled, simulate update\r\n  if (USE_MOCKS) {\r\n    return new Promise(resolve => {\r\n      setTimeout(() => {\r\n        const inspectionIndex = mockInspections.findIndex(inspection => \r\n          inspection.id === parseInt(id)\r\n        );\r\n        \r\n        if (inspectionIndex !== -1) {\r\n          mockInspections[inspectionIndex] = {\r\n            ...mockInspections[inspectionIndex],\r\n            ...updateData\r\n          };\r\n          resolve(mockInspections[inspectionIndex]);\r\n        } else {\r\n          throw new Error('Inspection not found');\r\n        }\r\n      }, 500);\r\n    });\r\n  }\r\n\r\n  try {\r\n    const token = localStorage.getItem('token');\r\n    const response = await fetch(`${API_BASE_URL}/inspections/${id}`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Authorization': token ? `Bearer ${token}` : '',\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(updateData)\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n\r\n    const apiInspection = await response.json();\r\n    return apiInspection.data || null;\r\n\r\n  } catch (error) {\r\n    console.warn('API call failed, falling back to mock update:', error.message);\r\n    \r\n    // Simulate update in mock data\r\n    const inspectionIndex = mockInspections.findIndex(inspection => \r\n      inspection.id === parseInt(id)\r\n    );\r\n    \r\n    if (inspectionIndex !== -1) {\r\n      mockInspections[inspectionIndex] = {\r\n        ...mockInspections[inspectionIndex],\r\n        ...updateData\r\n      };\r\n      return mockInspections[inspectionIndex];\r\n    } else {\r\n      throw new Error('Inspection not found');\r\n    }\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}